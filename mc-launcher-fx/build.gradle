plugins {
    id "application"

    // MacAppBundle
    // https://plugins.gradle.org/plugin/com.github.cr0.macappbundle
    id "com.github.cr0.macappbundle" version "3.1.0"

    // Launch4j plugin
    // https://plugins.gradle.org/plugin/edu.sc.seis.launch4j
    id "edu.sc.seis.launch4j" version "1.6.1"
}

mainClassName = 'com.subakstudio.mclauncher.Main'

project.ext {
    logbackVersion = '1.1.3'
    jacksonVersion = '2.7.1'
    okhttpVersion = '3.2.0'
    appDisplayName = 'McLauncherFX'
    appPackageName = 'com.subakstudio.mclauncher'
    // png file from http://www.clker.com/clipart-23525.html
    iconFileName = '1216180887826559566jean_victor_balin_icon_cube_red.svg.hi.png'
}

dependencies {
    // The production code uses the SLF4J logging API at compile time
    compile 'org.slf4j:slf4j-api:1.7.13'

    // sfl4j is just a facade for loggers. To actually get logging to work, you need to
    // tie it in with some actual implementation, e.g., logback
    compile group: 'ch.qos.logback', name: 'logback-classic', version: logbackVersion
    compile group: 'ch.qos.logback', name: 'logback-core', version: logbackVersion

    // Easy Logging
    compile 'org.projectlombok:lombok:1.16.6'

    // OkHttp for Http Client
    compile "com.squareup.okhttp3:okhttp:${okhttpVersion}"
    compile "com.squareup.okhttp3:okhttp-urlconnection:${okhttpVersion}"

    // Jackson for JSON
    compile "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    compile "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"

    // JavaFX components
    compile 'org.controlsfx:controlsfx:8.40.10'

    // Apache Common IO
    compile 'commons-io:commons-io:2.4'

    // FontAwesomeFX
    compile 'de.jensd:fontawesomefx:8.9'

    testCompile group: 'junit', name: 'junit', version: '4.11'
}

launch4j {
    mainClassName = project.mainClassName
    bundledJrePath = 'jre'
    bundledJre64Bit = true
    jreRuntimeBits = '64'
    // Converted from https://iconverticons.com/online/
    icon = '../../../resources/${iconFileName}.ico'
}

Properties properties = new Properties()

if (project.file("local.properties").exists()) {
    properties.load(project.file("local.properties").newDataInputStream())
} else {
    println("local.properties file is required.")
}

def releasesDir = properties.getProperty('releases.dir')
def thisReleaseDir = "$releasesDir/$project.version"
def thisReleaseName = project.name + "-" + project.version
def distsDir = "$buildDir/distributions"

task copyJre(type: Copy) {
    destinationDir = file(project.buildDir)
    def jreDir = properties.getProperty('jre.dir')
    if (jreDir != null) {
        from(fileTree(jreDir)) {
            include "**/**"
        }
    }
}

task distWin64WithJRE(dependsOn: ['distZip', 'launch4j', 'copyJre'], type: Zip) {
    destinationDir file(distsDir)
    archiveName "$thisReleaseName-win64-jre.zip"

    into("jre") {
        from("$buildDir/jre")
    }
    into("lib") {
        from("$buildDir/launch4j/lib")
    }
    into("bin") {
        from("$buildDir/scripts")
    }
    into("") {
        from("$buildDir/launch4j/$project.name" + ".exe")
    }
}

task distWin64WithoutJRE(dependsOn: ['distZip', 'launch4j'], type: Zip) {
    destinationDir file(distsDir)
    archiveName "$thisReleaseName-win64.zip"
    into("lib") {
        from("$buildDir/launch4j/lib")
    }
    into("bin") {
        from("$buildDir/scripts")
    }
    into("") {
        from("$buildDir/launch4j/$project.name" + ".exe")
    }
}

task deployWin64DistsToReleasesDir(type: Copy) {
    destinationDir file(thisReleaseDir)
    from distsDir
    include "*-win64*.zip"
    duplicatesStrategy 'exclude'
}

macAppBundle {
    appName = appDisplayName
    // Application category
    // https://developer.apple.com/library/ios/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/TP40009250-SW8
    appCategory = "public.app-category.games"

    // Converted from https://iconverticons.com/online/
    icon = "${buildDir}/resources/main/${iconFileName}.icns"

    agent = false
    version = project.version
    shortVersion = project.version
    mainClassName = project.mainClassName
    bundleJRE = false
    bundleExecutable = appDisplayName
    bundleIdentifier = appPackageName
    bundleCopyright = "Copyright 2015-2016 Subak Studio"

    bundleExtras.put("NSHighResolutionCapable", "true")
    javaProperties.put("file.encoding", "utf-8")
    javaXProperties.add("mx2048M")
    // NOTE: below option only for SWT based application
    //    javaXProperties.add("startOnFirstThread")
}

task distMacosx(dependsOn: ['createDmg']) {
}

task deployMacosxDistsToReleasesDir(type: Copy, dependsOn: ['distMacosx']) {
    println "destinationDir=${file(thisReleaseDir)}"
    destinationDir file(thisReleaseDir)
    from distsDir
    include "*.dmg"
    duplicatesStrategy 'exclude'
}

// Group distribution tasks
def distMcLauncherGroup = 'dist-mclauncher'
copyJre.group = distMcLauncherGroup
distWin64WithJRE.group = distMcLauncherGroup
distWin64WithoutJRE.group = distMcLauncherGroup
deployWin64DistsToReleasesDir.group = distMcLauncherGroup
distMacosx.group = distMcLauncherGroup
deployMacosxDistsToReleasesDir.group = distMcLauncherGroup
